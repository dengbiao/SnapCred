---
description: 
globs: 
alwaysApply: false
---
 ---
description: 在组件目录之外使用别名导入（@xxx）而不是相对路径导入（../）
globs: src/**/*.{ts,tsx}
alwaysApply: false
---

# 导入路径模式

## 上下文
- 在整个应用程序中导入模块时
- 重构或编写带有导入的新代码时
- 适用于所有 TypeScript 文件，组件目录内的文件除外

## 要求
- 使用别名导入（@xxx）而不是带有 '../' 的相对路径导入
- 组件目录不受此规则限制，可以在内部使用相对导入
- 路径别名在 tsconfig.json 和 webpack.config.js 中配置
- 可用别名：@app, @presentation, @domain, @infrastructure, @assets, @utils, @styles

## 示例
<example>
// 好 - 使用别名导入
import Layout from "@presentation/components/layout/Layout";
import HomePage from "@app/pages/HomePage";
import { fetchData } from "@infrastructure/api/dataService";
</example>

<example>
// 好 - 组件目录内的相对导入
// 仅适用于同一组件目录内的导入
import { Button } from "./Button";
import { useComponentState } from "./hooks/useComponentState";
</example>

<example type="invalid">
// 坏 - 在组件目录外使用带有 '../' 的相对路径
import HomePage from "../pages/HomePage";
import Layout from "../../presentation/components/layout/Layout";
</example>

## 关键规则
  - 从不同目录导入时始终使用 @xxx 别名导入
  - 仅在同一组件目录内使用相对导入（./ 或 ../）
  - 在代码库中任何地方都不要使用超过一级的相对导入（../../）
  - 确保您的 IDE 正确配置以解析别名